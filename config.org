#+PROPERTY: header-args :tangle yes

* Config

** Basics


This is an emacs configuration written as Org file(s). Literate configs are a
side of literate programming
(https://en.wikipedia.org/wiki/Literate_programming) where configuration is
written in a file along with its documentation. From this literate configuration
file, configs applied are subject to be extracted into a "runnable" file (in
this case into init.el), this process is called "tangling" (important Org
functions for this are org-babel-tangle and org-babel-tangle-file, see:
https://orgmode.org/manual/Extracting-source-code.html for more info on the
subject).

*** Basic defaults

Remove all the stuff I don't use.

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(cua-mode t)  ;; Set CUA-mode on
 '(scroll-bar-mode nil)
 '(dired-kill-when-opening-new-dired-buffer t)
 '(horizontal-scroll-bar-mode nil)
 '(blink-cursor-mode nil)
 '(tool-bar-mode nil)
 '(menu-bar-mode nil)
 '(package-native-compile t)
 '(xref-search-program 'ripgrep)
)
#+END_SRC

Some miscellaneous defaults.

#+BEGIN_SRC emacs-lisp
(setq-default inhibit-startup-screen t
              initial-scratch-message ""
              visible-bell nil                        ; No shaking
              confirm-nonexistent-file-or-buffer nil  ; Remove confirm dialog on new buffers
              show-paren-delay 0                      ; No delay when showing matching parenthesis
              confirm-kill-emacs 'y-or-n-p            ; Confirm exiting Emacs
              display-time-default-load-average nil   ; Don't display load average
              indent-tabs-mode nil                    ; No tabs for indentation
              select-enable-clipboard t               ; Unite Emacs & system clipboard
              window-combination-resize t             ; Create new windows proportionally
              use-package-always-ensure t             ; Install packages if not found on the system
              line-number-mode t                      ; Line number
              column-number-mode t                    ; Column number
              fill-column 80                          ; 80 columns is the standard
              ns-pop-up-frames nil                    ; Visit files in same frame
              completions-detailed t                  ; Show more info when describing things
              use-short-answers t                     ; Use instead of y-or-n-p
              package-native-compile t
              native-comp-async-report-warnings-errors nil ;; Don't show native compile warnings
)
#+END_SRC

Scrolling defaults.

#+BEGIN_SRC emacs-lisp
(setq scroll-margin 1
      scroll-conservatively 0
      scroll-up-aggressively 0.01
      scroll-down-aggressively 0.01)

(setq-default scroll-up-aggressively 0.01
              scroll-down-aggressively 0.01)
#+END_SRC

UTF-8 everywhere, because it is the standard and disable CJK
coding/encoding (Chinese/Japanese/Korean characters).

#+BEGIN_SRC emacs-lisp
(setq utf-translate-cjk-mode nil
      default-file-name-coding-system 'utf-8
      locale-coding-system 'utf-8
      x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment 'utf-8)
(setenv "LC_CTYPE" "UTF-8")

(if (boundp buffer-file-coding-system)
    (setq buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))
#+END_SRC

Various basic modes enabled by default

#+BEGIN_SRC emacs-lisp
(dolist (mode
  '(global-prettify-symbols-mode
    global-auto-revert-mode
    global-display-line-numbers-mode
    ))
  (funcall mode 1))
#+END_SRC

*** Theme

Use `monokai` theme for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package monokai-theme
  :init
  (load-theme 'monokai t))
#+END_SRC

Set my preferred font, as well as stronger highlight for search results.
Selected by listing the faces (M-x list-faces-display, and then
searching for 'lazy-highlight', which corresponds to the
search results for a given ISearch.

#+begin_src emacs-lisp
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :extend nil :stipple nil :background "#272822" :foreground "#F8F8F2" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 113 :width normal :foundry "PfEd" :family "DejaVu Sans Mono"))))
 '(italic ((t (:underline nil))))
 '(lazy-highlight ((t (:inherit highlight :background "DarkGoldenrod1")))))
#+end_src

**** Column enforce mode
Because 80 columns is THE
rule. https://www.kernel.org/doc/Documentation/process/coding-style.rst

#+begin_src emacs-lisp
(global-display-fill-column-indicator-mode t)
#+end_src

*** OS customizations
**** Load $PATH.

Use Steve Purcell's [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]].

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :init
  (if (eq system-type 'darwin)
      (progn
        (setq shell-file-name "/usr/bin/zsh")
        (exec-path-from-shell-initialize))
    (if (eq system-type 'gnu/linux)
        (progn
          (setq shell-file-name "/bin/fish")
          (exec-path-from-shell-initialize)))))
#+END_SRC

**** Mac keys

The variables available for binding the modifier keys on Mac keyboards are the following:

- mac-function-modifier
- mac-control-modifier
- mac-command-modifier
- mac-option-modifier
- mac-right-command
- mac-right-control-modifier
- mac-right-option-modifier

The values can be `'control`, `'alt`, `'meta`, `'super`, `'hyper` or `nil` (setting to nil allows the OS to assign values). Sources: [[https://www.emacswiki.org/emacs/EmacsForMacOS#toc31][emacswiki.org]] 
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mac-_002f-GNUstep-Events.html#Mac-_002f-GNUstep-Events][gnu.org]].

#+begin_src emacs-lisp
(if (eq system-type 'darwin)
    (progn
    (setq-default mac-command-modifier 'meta                        ; Map Meta to Cmd
                  mac-option-modifier nil                           ; Don't use Option key
                  mac-right-option-modifier nil                     ; Disable the right Alt key        
                  dired-use-ls-dired nil)))                         ; macOS command ls doesn't support --dired option
#+end_src

*** Backups

As default write backup files on ~/.emacs.d/backup and disables lock files, it gets messy on mounted network file systems like Keybase FS (https://keybase.io/).

#+BEGIN_SRC emacs-lisp
(let ((backup-dir "~/.emacs.d/backup/")
      (auto-saves-dir "~/.emacs.d/auto-save-list/"))
  (dolist (dir (list backup-dir auto-saves-dir))
    (when (not (file-directory-p dir))
      (make-directory dir t)))
  (setq backup-directory-alist `(("." . ,backup-dir))
        auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
        auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
        tramp-backup-directory-alist `((".*" . ,backup-dir))
        tramp-auto-save-directory auto-saves-dir))

(setq backup-by-copying t
      delete-old-versions t
      kept-new-versions 3
      kept-old-versions 2
      version-control t
      create-lockfiles nil
      vc-follow-symlinks t)
#+END_SRC

Save history typed in minibuffer

#+begin_src emacs-lisp
(use-package savehist
  :init
  (savehist-mode))
#+end_src

*** Filter marked packages from Packages buffer.

#+begin_src emacs-lisp
(defun package-menu-find-marks ()
  "Find packages marked for action in *Packages*."
  (interactive)
  (occur "^[A-Z]"))
(define-key package-menu-mode-map "a" #'package-menu-find-marks)
#+end_src

*** Reload config

Reloads Emacs config without having to restart the service.

#+begin_src emacs-lisp
(defun emacs-reload ()
  "Reload emacs config"
  (interactive)
  (org-babel-load-file (expand-file-name "config.org" user-emacs-directory)))
#+end_src


** Languages / frameworks

Random modes without specific configuration blocks.

#+begin_src emacs-lisp
  (setq auto-mode-alist
      (append '(
                ("\\.pl$"     . perl-mode)
                ("\\.pm$"     . perl-mode)
                ("\\.java$"   . java-mode)
                ("\\.groovy$" . groovy-mode)
                ("\\.txt$"    . text-mode)
                ("\\.http$"   . restclient-mode)
                ("\\.sql$"    . sql-mode)
                ("\\.conf$"   . conf-mode)
                ("\\.erb$"    . web-mode)
                ("\\.css$"    . css-mode)
                ("\\.scss"    . scss-mode))
              auto-mode-alist))
#+end_src

*** JSON

Edit JSON files and treat them as JSON, not as Javascript (without the
need to start tide or run prettier on them).

#+begin_src emacs-lisp
(use-package json-mode
  :ensure t
  :mode "\\.json$")
#+end_src

*** Dot

#+begin_src emacs-lisp
(use-package dot-mode
  :mode "\\.dot$")
#+end_src

*** gnuplot

#+begin_src emacs-lisp
(use-package gnuplot
 :mode (("\\.g\\'" . gnuplot-mode)
         ("\\.p\\'" . gnuplot-mode)))
#+end_src

*** Docker

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile$"
  :mode "Dockerfile.test$")
#+END_SRC

Docker compose as well

#+begin_src emacs-lisp
(use-package docker-compose-mode
  :ensure t
  :mode (("\\compose.yml" . docker-compose-mode)
         ("\\compose.yaml" . docker-compose-mode)))
#+end_src

*** HTML

#+BEGIN_SRC emacs-lisp
(use-package sgml-mode
  :mode (("\\.html$" . sgml-mode)
         ("\\.htm$" . sgml-mode))
  :config (setq-default sgml-basic-offset 2))
#+END_SRC

*** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode (("INSTALL\\'" . markdown-mode)
         ("CONTRIBUTORS\\'" . markdown-mode)
         ("LICENSE\\'" . markdown-mode)
         ("README\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'" . markdown-mode))
  :hook (markdown-mode . auto-fill-mode)
  :config
  (setq-default markdown-asymmetric-header t
                markdown-split-window-direction 'right
                markdown-command "/usr/bin/pandoc"))
#+END_SRC

*** YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode (("\\.yaml$" . yaml-mode)
         ("\\.yml$" . yaml-mode))
  :hook
  (yaml-mode . (lambda ()
                 (define-key yaml-mode-map (kbd "C-m") 'newline-and-indent))))
#+END_SRC

*** CSV

#+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :mode "\\.[Cc][Ss][Vv]$"
  :init (setq csv-separators '("," ";" "|" " ")))
#+END_SRC

*** Go

Golang setup. Autocompletion et al provided by LSP (see related config
block).

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :ensure t
  :hook
  (go-mode . (lambda ()
               (add-hook 'before-save-hook #'lsp-format-buffer t t)
               (add-hook 'before-save-hook #'lsp-organize-imports t t))))
#+END_SRC

Use flycheck checker for golangci-lint
#+begin_src emacs-lisp
(use-package flycheck-golangci-lint
  :ensure t
  :hook (go-mode . flycheck-golangci-lint-setup)
  :config
  (setq flycheck-golangci-lint-enable-linters '("bodyclose" "errcheck" "gci" "govet" "revive")
        flycheck-golangci-lint-deadline "5s"))
#+end_src

*** Ruby

#+BEGIN_SRC emacs-lisp
(use-package ruby-mode
  :mode (("\\.rb$" . ruby-mode)
         ("\\.rake$" . ruby-mode)
         ("\\.ru$" . ruby-mode)
         ("Gemfile$" . ruby-mode)
         ("Rakefile$" . ruby-mode)
         ("Capfile$" . ruby-mode)
         ("\\.gemspec$" . ruby-mode))
  :init
  (setq ruby-insert-encoding-magic-comment nil
        ruby-indent-tabs-mode nil
        ruby-mode-hook 2))
#+END_SRC

Use [[https://rvm.io/][RVM]] to manage gems.

#+BEGIN_SRC emacs-lisp
(use-package rvm
  :ensure t
  :config
  (rvm-use-default))
#+END_SRC

*** Cucumber

Use [[https://cucumber.io/][Cucumber]] for BDD

#+BEGIN_SRC emacs-lisp
(use-package feature-mode
  :mode (("\\.feature$" . feature-mode))
  :commands feature-mode
  :config
  (setq feature-default-language "en"))
#+END_SRC

*** Erlang

Using standard erlang.el

#+begin_src emacs-lisp
(use-package erlang
  :ensure t
  :mode "\\.P$\\|\\.E$\\|\\.S$\\|\\.erl?$"
  :hook (erlang-mode . (lambda ()
                         (setq mode-name "erlang"
                               erlang-compile-extra-opts '((i . "../include"))
                               erlang-root-dir "/usr/local/lib/erlang"))))
#+end_src

*** Clojure

Minimal setup to begin with, clojure-mode.

#+begin_src emacs-lisp
(use-package clojure-mode
  :ensure t
  :mode "\\.clj$\\|\\.edn$"
  :hook
  (clojure-mode . (lambda ()
                    (subword-mode)
                    (eldoc-mode))))
#+end_src

Now [[https://github.com/clojure-emacs/cider][CIDER]]. Another creation from bbatsov :+1:

#+begin_src emacs-lisp
(use-package cider
  :ensure t
  :defer t
  :config
    (setq nrepl-log-messages t
          cider-repl-display-in-current-window t
          cider-repl-use-clojure-font-lock t
          cider-prompt-save-file-on-load 'always-save
          cider-font-lock-dynamically '(macro core function var)
          nrepl-hide-special-buffers t
          cider-overlays-use-font-lock t)
    (cider-repl-toggle-pretty-printing))
#+end_src

Autocompletion and documentation support provided by LSP (see related
config block).

Note: for LSP integration to work, installing [[https://github.com/snoe/clojure-lsp][clojure-lsp]] is a requirement.

*** Kubernetes

Just a basic mode for K8s artifacts (a wrapper for YAML with calls to
docs, if you will).

#+begin_src emacs-lisp
(use-package k8s-mode
  :ensure t
  :config (setq k8s-site-docs-version "v1.25"))
#+end_src

*** Javascript

These configs rely on rjsx-mode as the major mode to edit Javascript files
(whichever the flavor). Additionally, it relies on prettier
In order to work with Javascript, you would likely need to run (at least) the
following setup:

- Install NVM
- Before opening a project/subfolder containing a Javascript codebase do:
- $ cd <folder>/
- $ nvm use
- $ npm i -g typescript-language-server && npm i -g typescript && npm i -g prettier
- $ yarn install
- $ [[https://github.com/magandrez/dotfiles/blob/main/bin/.local/bin/emacs_export][emacs_export]] PATH && emacs_export NVM_BIN

The above will ensure Emacs has the path is set and NVM_BIN points to the
correct location. After that, the following major and minor mode configs should
take care of the rest.

#+begin_src emacs-lisp
(use-package rjsx-mode
  :mode ("\\.js\\'"
         "\\.jsx\\'"
         "\\.ts\\'"
         "\\.vue\\'"
         "\\.tsx\\'")
  :hook (rjsx-mode . (lambda ()
                       (setq js2-mode-show-parse-errors nil
                             js2-mode-show-strict-warnings nil
                             js2-basic-offset 2
                             js-indent-level 2
                             flycheck-disabled-checkers (cl-union flycheck-disabled-checkers
                                                                '(javascript-jshint)))))
  :config
  (use-package add-node-modules-path
    :defer t
    :hook (rjsx-mode . add-node-modules-path))
  (use-package prettier-rc
    :defer t
    :hook (rjsx-mode . prettier-rc-mode)))
#+end_src


** Features


*** Which-key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish
  :hook (after-init . which-key-mode)
  :config
  (setq which-key-idle-delay 0.5
        which-key-idle-secondary-delay nil))
#+END_SRC

*** Try

For trying packages
#+begin_src emacs-lisp
(use-package try)
#+end_src

*** Ace

Use ace-window to cycle through windows

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :config (setq aw-dispatch-when-more-than 5)
    :bind ("M-o" . ace-window))
#+END_SRC

*** Ibuffer

#+BEGIN_SRC emacs-lisp
(defun my-org-agenda-filter ()
  (let ((fname (buffer-file-name)))
    (and fname
         (member (file-truename fname)
                 (mapcar 'file-truename (org-agenda-files))))))

(setq ibuffer-expert t
      ibuffer-show-empty-filter-groups nil
      ibuffer-saved-filter-groups
      (list
       (cons "default"
             (append
               '(("Org Agenda"  (name . "\*Org Agenda\*"))
                ("Magit" (name . "\*magit"))
                ("Emacs" (name . "^\\*"))
                ("Org" (or (mode . org-agenda-mode)
                           (mode . diary-mode)
                           (predicate . (my-org-agenda-filter)))))))))

(add-hook 'ibuffer-mode-hook
  (lambda ()
    (ibuffer-auto-mode 1)
    (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC

*** Encryption

EasyPG is used for encryption. More info
([[https://www.emacswiki.org/emacs/EasyPG]]).

GPG_AGENT_INFO environment variable is assumed to be loaded (in Mac OS X,
implement S. Purcell's [[exec-path-from-shell][exec-path-from-shell]]. In GNU/Linux, the variable is fed
to the daemon started from a systemd service definition.

#+BEGIN_SRC emacs-lisp
(setq epg-gpg-program "gpg2"
      epa-file-inhibit-auto-save t
      epa-file-encrypt-to '("manuel@manuel.is")      ;; Hack to make org-roam capture
      epa-file-select-keys 1                         ;; pick up automatically the key with which to encrypt the note. See https://superuser.com/questions/1204820/emacs-easypg-asks-what-key-to-use-although-epa-file-encrypt-to-already-specified
      epa-pinentry-mode 'loopback)
#+END_SRC

For credentials, use `auth-source-pass`, included in Emacs 26. See
more [[https://www.gnu.org/software/emacs/manual/html_mono/auth.html][here]].

#+begin_src emacs-lisp
(auth-source-pass-enable)
(setq auth-source-debug t)
#+end_src

*** Tramp mode

Use `tramp` to shell into other machines.

#+BEGIN_SRC emacs-lisp
(use-package tramp
  :defer t
  :config
  (tramp-set-completion-function "ssh" '((tramp-parse-sconfig "/etc/ssh_config") (tramp-parse-sconfig "~/.ssh/config"))))
#+END_SRC

*** Smart parens

Use smart parens when writing parenthesis to not let any parethesis unmatched.

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :init (smartparens-global-mode t))
#+END_SRC

*** Projectile

Use Projectile to manage projects as an entity.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :delight '(:eval (concat " " (projectile-project-name)))
  :defer 1
  :init
  (setq-default
   projectile-cache-file (expand-file-name ".projectile-cache" user-emacs-directory)
   projectile-keymap-prefix (kbd "C-c C-p")
   projectile-known-projects-file (expand-file-name
                                   ".projectile-bookmarks" user-emacs-directory))
  :config
  (projectile-global-mode 1)
  (setq-default
   projectile-indexing-method 'alien
   projectile-globally-ignored-modes '("org-mode" "org-agenda-mode")
   projectile-globally-ignored-file-suffixes '(".gpg")
   projectile-completion-system 'default ;; Uses selectrum (based on Emacs API `completing-read`
   projectile-enable-caching t
   projectile-mode-line '(:eval (projectile-project-name)))
   (add-hook 'org-agenda-mode-hook (lambda () (projectile-mode -1)))
   (add-hook 'org-mode-hook (lambda () (projectile-mode -1))))
#+END_SRC

*** Highlight

#+BEGIN_SRC emacs-lisp
(use-package highlight)
#+END_SRC

*** Treemacs

Use `treemacs` to open a side window displaying the folder structure of a
project or a directory, á la Eclipse or other common IDEs.

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :init (defvar treemacs-no-load-time-warnings t)
  :defer t
  :config
  (setq treemacs-follow-after-init t
        treemacs-width 35
        treemacs-indentation 1
        treemacs-recenter-after-file-follow nil
        treemacs-silent-refresh t
        treemacs-silent-filewatch t
        treemacs-change-root-without-asking t
        treemacs-sorting 'alphabetic-desc
        treemacs-show-hidden-files t
        treemacs-never-persist nil
        treemacs-is-never-other-window nil
        treemacs-indentation-string (propertize " ǀ " 'face 'font-lock-comment-face)
        treemacs-follow-mode t
        treemacs-filewatch-mode t
        treemacs-fringe-indicator-mode t)
  :bind
  (([f8] . treemacs)
   ("C-c f" . treemacs-select-window)))

(use-package treemacs-projectile
  :defer t
  :after treemacs projectile
  :bind
  (("C-c o p" . treemacs-projectile)))

(use-package lsp-treemacs
  :after treemacs lsp-mode)

(with-eval-after-load 'lsp-mode
  (lsp-treemacs-sync-mode 1))
#+END_SRC

*** Yafolding

Fold code. I found `yafolding` simplier to use than e.g.: `origami`
#+BEGIN_SRC emacs-lisp
(use-package yafolding
  :hook ((ruby-mode . yafolding-mode)
         (go-mode . yafolding-mode)
         (terraform-mode . yafolding-mode)
         (json-mode . yafolding-mode)
         (rjsx-mode . yafolding-mode))
  :bind (("M-n" . yafolding-toggle-element)
         ("M-m" . yafolding-toggle-all)))
#+END_SRC

*** Restclient

Use Pashky's [[https://github.com/pashky/restclient.el][restclient.el]] to explore APIs

#+begin_src emacs-lisp
(use-package restclient
  :defer t
  :mode ("\\.http\\'" . restclient-mode))
#+end_src

*** Magit

Magit is love for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t
  :config
    (setq magit-log-arguments '("-n256" "--graph" "--decorate" "--color"))
  :bind (("C-x g" . magit-status))
  :init
  (setq-default
   magit-auto-revert-mode nil
   magit-refs-show-commit-count 'all
   magit-section-show-child-count t
   magit-log-section-commit-count 15))
#+END_SRC

Configuring forge
#+begin_src emacs-lisp
(use-package forge
  :defer t
  :after magit
  :init
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
#+end_src

*** LSP

The Language Server Protocol is becoming a standard, and it rocks.

Emacs has support via [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]].

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred lsp-format-buffer lsp-organize-imports)
    :config
    (setq lsp-keymap-prefix "C-l"
          lsp-eldoc-render-all nil
          lsp-gopls-complete-unimported t
          lsp-inhibit-message t
          lsp-enable-file-watchers nil
          lsp-enable-semantic-highlighting t
          ;; Performance tweaks
          ;; https://github.com/emacs-lsp/lsp-mode#performance
          gc-cons-threshold 100000000
          read-process-output-max (* 1024 1024)
          lsp-idle-delay 0.25
          lsp-keep-workspace-alive nil
          lsp-prefer-flymake nil
          lsp-enable-snippet t
          lsp-enable-completion-at-point t
          lsp-auto-configure t
          lsp-auto-guess-root t
          lsp-disabled-clients '(eslint angular-ls deno tfls) ;; For Terraform, don't use tfls, but use Hashicorp's official implementation
          lsp-terraform-ls-enable-show-reference t ;; Code lens is experimental in Terraform mode
          lsp-semantic-tokens-enable t
          lsp-semantic-tokens-honor-refresh-requests t
          lsp-enable-which-key-integration t
          lsp-enable-links t
          lsp-terraform-ls-prefill-required-fields t
          lsp-terraform-ls-validate-on-save t)
    ;; (add-to-list 'lsp-language-id-configuration '(clojure-mode . "clojure"))
    :hook (((go-mode clojure-mode clojurescript-mode terraform-mode) . lsp-deferred)
           ((c-mode c++-mode js2-mode rjsx-mode) . lsp)))

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-doc-enable t
          lsp-ui-doc-header nil
          lsp-ui-doc-include-signature t
          lsp-ui-doc-position 'bottom
          lsp-ui-doc-alignment 'window
          lsp-ui-doc-use-childframe t
          lsp-ui-doc-use-webkit nil
          lsp-ui-doc-delay 0.2
          lsp-ui-doc-show-with-cursor t
          lsp-ui-sideline-diagnostic-max-lines 3
          lsp-ui-sideline-diagnostic-max-line-length 200
          lsp-ui-imenu-enable t))

  (with-eval-after-load 'lsp-mode
    ;; :global/:workspace/:file
    (setq lsp-modeline-diagnostics-scope :workspace))
#+end_src

*** DAP

Similar to LSP, but for debugging purposes, [[https://emacs-lsp.github.io/dap-mode/][dap-mode]] implements the Debug
Adapter Protocol

#+begin_src emacs-lisp
(use-package dap-mode
  :defer t
  :ensure t
  :init (require 'dap-dlv-go)
  :config
  (dap-mode 1)
  (setq dap-auto-configure-features '(sessions locals controls tooltip)
        dap-print-io t))

;; Straight from doom emacs:
;; https://github.com/doomemacs/doomemacs/blob/master/modules/tools/debugger/config.el
  (define-minor-mode +dap-running-session-mode
    "A mode for adding keybindings to running sessions."
    :init-value nil
    :keymap (make-sparse-keymap)
    (when +dap-running-session-mode
      (let ((session-at-creation (dap--cur-active-session-or-die)))
        (add-hook 'dap-terminated-hook
                  (lambda (session)
                    (when (eq session session-at-creation)
                      (+dap-running-session-mode -1)))))))

  ;; Activate this minor mode when dap is initialized
  (add-hook 'dap-session-created-hook #'+dap-running-session-mode)
  ;; Activate this minor mode when hitting a breakpoint in another file
  (add-hook 'dap-stopped-hook #'+dap-running-session-mode)
  ;; Activate this minor mode when stepping into code in another file
  (add-hook 'dap-stack-frame-changed-hook (lambda (session)
                                            (when (dap--session-running session)
                                              (+dap-running-session-mode 1))))
#+end_src

*** Completion

#+begin_src emacs-lisp
(use-package company
  :defer t
  :ensure t
  :hook
  ((prog-mode org-mode) . company-mode)
  :config
  (setq company-minimum-prefix-length 2
        company-idle-delay 0.2
        completion-ignore-case t)
  :bind (:map company-active-map
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous)))

(use-package company-box
  :defer t
  :ensure t
  :hook (company-mode . company-box-mode))
#+end_src

*** Flycheck

On-the-fly syntax checking

#+begin_src emacs-lisp
(use-package flycheck
  :defer t
  :diminish
  :ensure t
  :init (global-flycheck-mode)
  :config
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  ;; flycheck-javascript-standard-executable "/home/manuel/.nvm/versions/node/v15.0.1/bin/standardx")
)

(use-package flycheck-pos-tip
  :defer t
  :ensure t
  :after flycheck
  :config
  (setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages))
#+end_src

*** Vertico + Orderless + Marginalia + Consult

[[https://github.com/minad/vertico][Vertico]] is an interesting alternative to Ivy + Swiper and a substitute of Selectrum

#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :bind (:map vertico-map
         ("C-n" . vertico-next)
         ("C-p" . vertico-previous)
         ("C-f" . vertico-exit)
         :map minibuffer-local-map
         ("M-h" . backward-kill-word))
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode)
  :config
  (setq completion-styles '(basic substring partial-completion flex))
  (setq read-file-name-completion-ignore-case t
        read-buffer-completion-ignore-case t
        completion-ignore-case t))
#+end_src

[[https://github.com/oantolin/orderless][Orderless]] for giving order to Vertico's

#+begin_src emacs-lisp
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

[[https://github.com/minad/marginalia/][Marginalia]] is an awesome package to give context to the mini-buffer list

#+begin_src emacs-lisp
(use-package marginalia
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  :init (marginalia-mode))

#+end_src

[[https://github.com/minad/consult][Consult]] provides practical commands based on the completion functionality

#+begin_src emacs-lisp
;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c m" . consult-mode-command)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi))

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Optionally replace `completing-read-multiple' with an enhanced version.
  ;;(advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   :preview-key (kbd "M-."))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;;;; 2. projectile.el (projectile-project-root)
   (autoload 'projectile-project-root "projectile")
   (setq consult-project-root-function #'projectile-project-root)
)
#+end_src

*** YASnippet

A template system for filling in the knowledge blanks ;) Set hook per language

#+begin_src emacs-lisp
(use-package yasnippet
  :defer t
  :delight
  :ensure t
  :init
   (add-hook 'prog-mode-hook #'yas-minor-mode)
   (add-hook 'markdown-mode #'yas-minor-mode)
   (add-hook 'rjsx-mode #'yas-minor-mode)
   (add-hook 'terraform-mode #'yas-minor-mode)
  :config
   (yas-global-mode 1)
   (setq yas-snippet-dirs '("~/.emacs.d/snippets" "/usr/share/yasnippet-snippets"))
   (yas-reload-all))
#+end_src

Various snippets

#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :defer t
  :ensure t
  :after yasnippet
  :config
  (yas-reload-all))
#+end_src

*** Flyspell

Use flyspell for highlighting and correcting spelling mistakes.

#+begin_src emacs-lisp
(use-package flyspell
  :diminish
  :ensure t
  :defer t
  :hook
    (text-mode . flyspell-mode)
  :custom (setq flyspell-correct-interface #'flyspell-correct-dummy))
#+end_src

*** RSS

Use [[https://github.com/skeeto/elfeed][elfeed]] for RSS

#+begin_src emacs-lisp
(use-package elfeed
  :defer t
  :ensure t
  :bind (:map elfeed-search-mode-map
   ("m" . elfeed-toggle-star))
  :config
  (setq elfeed-search-title-max-width 150))

(use-package elfeed-goodies
  :defer t
  :ensure t
  :after elfeed
  :config
  (elfeed-goodies/setup)
  (setq elfeed-goodies/entry-pane-position 'bottom
        elfeed-goodies/switch-to-entry nil
        elfeed-goodies/feed-source-column-width 25
        elfeed-goodies/tag-column-width 27))

(use-package elfeed-org
  :defer t
  :ensure t
  :after elfeed
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/feeds/rss.org")))

(use-package elfeed-dashboard
  :after elfeed
  :ensure t
  :config
  (setq elfeed-dashboard-file "~/feeds/dashboard.org")
  ;; update feed counts on elfeed-quit
  (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links))
#+end_src

*** Ripgrep

`ripgrep` is a fast grep tool built in Rust. [[https://github.com/dajva/rg.el][rg]] is a `ripgrep`
frontend for Emacs.

#+begin_src emacs-lisp
(use-package rg
  :ensure t
  :init (rg-enable-default-bindings))
#+end_src

*** Diminish

Manages modeline for minor modes

#+begin_src emacs-lisp
(use-package diminish
  :ensure t)

(diminish 'eldoc-mode)
(diminish 'org-indent-mode)
#+end_src

*** Delight

Manages modeline for minor and major modes

#+begin_src emacs-lisp
(use-package delight
  :ensure t)
#+end_src

*** UUID

Provide UUID generation support (for all standards) inside Emacs

#+begin_src emacs-lisp
(use-package uuidgen
  :defer t
  :ensure t)
#+end_src

*** Edit-server
[[https://github.com/stsquad/emacs_chrome][edit-server]] is a feature that works in conjunction with browsers' plugins
(depending on browser) to prompt an Emacs frame when editing text on the
browser.

#+begin_src emacs-lisp
(use-package edit-server
  :ensure t
  :commands edit-server-start
  :init (if after-init-time
              (edit-server-start)
            (add-hook 'after-init-hook
                      #'(lambda() (edit-server-start))))
  :config (setq edit-server-new-frame-alist
                '((name . "Edit with Emacs FRAME")
                  (top . 200)
                  (left . 200)
                  (width . 80)
                  (height . 25)
                  (minibuffer . t)
                  (menu-bar-lines . t)
                  (window-system . x))))
#+end_src

*** Dictionaries

Setup dictionaries (in Linux only). It needs of `dictionaries-common` and
`dictd` in Debian Bookworm.

Some dictionaries installed:

- dict-devil
- dict-jargon
- dict-vera
- dict-wn

#+begin_src emacs-lisp
(use-package dictionary
  :defer t
  :if (and (equal system-type 'gnu/linux)
           (executable-find "dictd"))
  :ensure t
  :config
  (setq dictionary-server "localhost"))
#+end_src

A thesaurus for synonyms

#+begin_src emacs-lisp
(use-package powerthesaurus
  :defer t
  :ensure t)
#+end_src

*** Undo-tree

Let's visualize changes neatly
#+begin_src emacs-lisp
(use-package undo-tree
  :defer t
  :hook (go-mode . undo-tree-mode)
  :config
  (setq undo-tree-visualizer-timestamps t
        undo-tree-visualizer-diff t
        undo-tree-history-directory-alist '(("." . "~/.emacs.d/auto-save-list/"))))
#+end_src


** Org

*** Agenda files
Adding org files for agenda

#+BEGIN_SRC emacs-lisp
(if (eq system-type 'darwin)
    (setq org-directory "/Volumes/Keybase/private/spavi/org"
          org-default-notes-file "/Volumes/Keybase/private/spavi/org/refile.org.gpg")
  (setq org-directory "/keybase/private/spavi/org"
        org-default-notes-file "/keybase/private/spavi/org/refile.org.gpg"))
(require 'find-lisp)
(setq org-agenda-files
  (find-lisp-find-files org-directory "\.org.gpg$"))
#+END_SRC

*** Main org configs

The thick of it

#+BEGIN_SRC emacs-lisp
  (use-package org
    :init
    (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
    (add-to-list 'auto-mode-alist '(".*/[0-9]*$" . org-mode))
    :hook (org-mode . auto-fill-mode)
    :hook (org-journal-mode . auto-fill-mode)
    :bind (("C-c l" . org-store-link)
           ("C-c n" . org-capture)
           ("C-c a" . org-agenda)
           ("C-M-<return>" . org-insert-item)
           ("C-c C-x i" . org-clock-in)
           ("C-c C-x o" . org-clock-out))
    :config
    (setq org-support-shift-select t
          org-return-follows-link t
          org-hide-emphasis-markers t
          org-outline-path-complete-in-steps nil
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-confirm-babel-evaluate nil
          org-log-done t
          org-refile-targets '((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9))
          org-refile-use-outline-path t
          org-outline-path-complete-in-steps nil
          org-indirect-buffer-display 'current-window
          org-fast-tag-selection-include-todo t
          org-use-fast-todo-selection t
          org-startup-indented t
          org-treat-S-cursor-todo-selection-as-state-change nil
          org-startup-with-inline-images t)
    (font-lock-add-keywords
     'org-mode `(("^\\*+ \\(TODO\\) "
                  (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚑") nil)))
                 ("^\\*+ \\(PROGRESSING\\) "
                  (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚐") nil)))
                 ("^\\*+ \\(CANCELLED\\) "
                  (1 (progn (compose-region (match-beginning 1) (match-end 1) "✘") nil)))
                 ("^\\*+ \\(DONE\\) "
                  (1 (progn (compose-region (match-beginning 1) (match-end 1) "✔") nil)))))
      (setq org-todo-keywords '((sequence "TODO(t)" "PROGRESSING(p)" "|" "DONE(d)")
                                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))
            org-todo-keyword-faces
            '(("TODO" :foreground "red" :weight bold)
              ("PROGRESSING" :foreground "deep sky blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)))
       (setq org-agenda-custom-commands
        '(("w" "Work agenda"
           ((agenda "")
            (tags-todo "work")))))
      (setq org-todo-state-tags-triggers
            (quote (("CANCELLED" ("CANCELLED" . t))
                    ("WAITING" ("WAITING" . t))
                    ("HOLD" ("WAITING") ("HOLD" . t))
                    (done ("WAITING") ("HOLD"))
                    ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                    ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                    ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
      (define-key org-mode-map [remap org-return] (lambda () (interactive)
                                                    (if (org-in-src-block-p)
                                                        (org-return) (org-return-indent)))))
#+END_SRC

*** Journaling

Org journaling

#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :defer t
  :init
  (setq org-journal-prefix-key "C-c j")
  :config
  (setq org-journal-date-format "%A, %d %B %Y"
        org-journal-file-format "%Y%m%d.org.gpg"
        org-journal-file-header "# -*- mode:org; epa-file-encrypt-to: (\"manuel@manuel.is\") -*-")
  :bind* ("C-c C-j" . org-journal-new-entry))
#+END_SRC


#+begin_src emacs-lisp
(if (eq system-type 'darwin)
    (setq org-journal-dir "/Volumes/Keybase/private/spavi/org/diary/")
  (setq org-journal-dir "/keybase/private/spavi/org/diary/"))
#+end_src

*** Org-template

Org-template custom configurations

#+BEGIN_SRC emacs-lisp
(defvar org-capture-templates
  '(
    ("t" "Inbox recipient."
     entry 
     (file+headline org-default-notes-file "Inbox")
     (file "~/.emacs.d/org-templates/schedule.orgcaptmpl"))
    ("l" "Link: Something interesting?"
     entry
     (file+headline org-default-notes-file "Links")
     (file "~/.emacs.d/org-templates/links.orgcaptmpl"))
    ("i" "Idea came up." 
     entry 
     (file+headline org-default-notes-file "Ideas")
     "*** %? \n Captured on %U")))
#+END_SRC

*** Meeting note taking 

(source: [[https://github.com/howardabrams/dot-files/][Howard Abrams' Github]])

#+BEGIN_SRC emacs-lisp
(defun meeting-notes ()
  "Call this after creating an org-mode heading for where the notes for the meeting
should be. After calling this function, call 'meeting-done' to reset the environment."
  (interactive)
  (outline-mark-subtree)
  (narrow-to-region (region-beginning) (region-end))
  (deactivate-mark)
  (delete-other-windows)
  (text-scale-set 2)
  (fringe-mode 0)
  (message "When finished taking your notes, run meeting-done."))

(defun meeting-done ()
  "Attempt to 'undo' the effects of taking meeting notes."
  (interactive)
  (widen)
  (text-scale-set 0)
  (fringe-mode 1))
#+END_SRC

*** Bullets!

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :after org
  :hook
  (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC

*** Calendar

Calendar modifications (Finnish calendar, etc)

#+BEGIN_SRC emacs-lisp
(use-package suomalainen-kalenteri
  :defer t
  :after org
  :config
  (setq calendar-date-style 'european
        calendar-latitude 60.1
        calendar-longitude 24.9
        calendar-week-start-day 1
        calendar-today-visible-hook 'calendar-mark-today
        calendar-holidays suomalainen-kalenteri))
#+END_SRC

*** Org-agenda configs

Some org-agenda specific configs.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-use-tag-inheritance nil
      org-agenda-ignore-drawer-properties '(effort appt category)
      org-agenda-dim-blocked-tasks nil
      org-agenda-tags-column -55
      org-log-into-drawer t)
#+END_SRC

*** Org-habits

Using org habits to track repeating tasks.

#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-habit)
(setq org-habit-show-habits-only-for-today nil
      org-habit-graph-column 60
      org-habit-show-all-today t
      org-habit-show-following-days 10
      org-habit-preceding-days 10
      org-habit-show-habits t)
#+end_src

*** Code blocks in org-mode

Make code blocks the old way with `<s TAB`

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

*** Ditaa and org-babel

Ditaa is a nice (Java) tool to generate images from ASCII. More info:
https://github.com/stathissideris/ditaa

#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages '(
                                                         (python . t) 
                                                         (ditaa . t)))
(setq org-ditaa-jar-path "/usr/bin/ditaa")
#+end_src

*** Google Calendar integration

#+begin_src emacs-lisp
(setq package-check-signature nil)

(defun get-gcal-config-value (key)
  "Return the value of the json file gcal_secret for key"
  (cdr (assoc key (json-read-file "~/.emacs.d/org-gcal/gcal.json"))))

(use-package org-gcal
  :ensure t
  :config
  (setq plstore-cache-passphrase-for-symmetric-encryption t
        org-gcal-client-id (get-gcal-config-value 'org-gcal-client-id)
        org-gcal-client-secret (get-gcal-config-value 'org-gcal-client-secret))
  (if (eq system-type 'darwin)
      (setq org-gcal-file-alist '(("manuel@compensate.com" . "/Volumes/Keybase/private/spavi/org/schedule.org.gpg")))
    (setq org-gcal-file-alist '(("manuel@compensate.com" . "/keybase/private/spavi/org/schedule.org.gpg"))))
  :hook (org-capture-after-finalize . org-gcal-sync))

(custom-set-variables
 '(org-gcal-down-days 10)
 '(org-gcal-up-days 10))
#+end_src

Org-babel languages to interpret in Org code blocks (by default, only
Lisp is understood).


** Mail

Configuration emailing with `mu4e` client and `mbsync` as backend. The
package is not available in MELPA/ELPA/GNU, but rather a system
package (hence the requires).

*** Mu4e config

#+begin_src emacs-lisp
  (when (eq system-type 'gnu/linux)
    (require 'mu4e)
    (require 'mu4e-contrib)
    (require 'mu4e-org)
    (require 'smtpmail)
    (with-eval-after-load 'mu4e
      (setq mu4e-mu-binary "/bin/mu"
            mail-user-agent 'mu4e-user-agent ;; This is not something to change lightly. Check docs
            mu4e-maildir "~/Maildir/manuel.is"
            mu4e-sent-folder   "/manuel.is/Sent"
            mu4e-drafts-folder "/manuel.is/Drafts"
            mu4e-trash-folder  "/manuel.is/Trash"
            mu4e-refile-folder "/manuel.is/Archive"
            user-full-name  "Manuel González"
            mu4e-attachment-dir "~/Downloads"
            mu4e-change-filenames-when-moving t ;; See this link for more info: https://stackoverflow.com/a/43461973
            mu4e-completing-read-function 'completing-read
            mu4e-compose-complete-addresses t
            mu4e-compose-context-policy nil
            mu4e-compose-dont-reply-to-self t
            mu4e-compose-keep-self-cc nil
            mu4e-context-policy 'pick-first
            mu4e-get-mail-command "mbsync -a"
            mu4e-headers-date-format "%d-%m-%Y %H:%M"
            mu4e-headers-fields '((:date . 22)
                                  (:flags . 6)
                                  (:from . 22)
                                  (:subject))
            mu4e-headers-include-related t
            mu4e-view-show-addresses t
            mu4e-view-show-images t
            message-kill-buffer-on-exit t
            message-send-mail-function 'smtpmail-send-it
            smtpmail-debug-info t
            smtpmail-smtp-user "manuel@manuel.is"
            smtpmail-smtp-server "127.0.0.1"
            smtpmail-stream-type 'starttls
            smtpmail-smtp-service 1025
            mm-sign-option 'guided
            mu4e-contexts
          `( ,(make-mu4e-context
                :name "manuel.is"
                :enter-func (lambda () (mu4e-message "Entering manuel.is context"))
                :leave-func (lambda () (mu4e-message "Leaving manuel.is context"))
                :match-func (lambda (msg)
                             (when msg
                               (or (mu4e-message-contact-field-matches msg :to "manuel@manuel.is")
                                   (mu4e-message-contact-field-matches msg :from "manuel@manuel.is")
                                   (mu4e-message-contact-field-matches msg :cc "manuel@manuel.is")
                                   (mu4e-message-contact-field-matches msg :bcc "manuel@manuel.is")
                                   (string-match-p "^/manuel.is/Inbox" (mu4e-message-field msg :maildir)))))
                :vars '( ( user-mail-address            . "manuel@manuel.is" )
                         ( user-full-name               . "Manuel González"  )
                         ( mu4e-maildir-shortcuts       . ((:maildir "/manuel.is/Inbox" :name "Inbox" :key ?i)
                                                           (:maildir "/manuel.is/Archive" :name "Archive" :key ?a)
                                                           (:maildir "/manuel.is/Drafts" :name "Drafts" :key ?d)
                                                           (:maildir "/manuel.is/All Mail" :name "All Mail" :key ?A)
                                                           (:maildir "/manuel.is/Trash" :name "Trash" :key ?t)
                                                           (:maildir "/manuel.is/Sent" :name "Sent" :key ?s)))
                         ( mu4e-bookmarks               . (( :name  "Unread messages"
                                                             :query "maildir:/manuel.is/Inbox AND flag:unread AND NOT flag:trashed"
                                                             :key ?u)
                                                           ( :name "Today's messages"
                                                             :query "maildir:/manuel.is/Inbox AND date:today..now"
                                                             :key ?n)
                                                           ( :name "Last 7 days"
                                                             :query "maildir:/manuel.is/Inbox AND date:7d..now"
                                                             :key ?w)
                                                           ( :name "Deleted"
                                                             :query "flag:trashed OR maildir:/manuel.is/Trash"
                                                             :key ?D)))
  ))))))

  (add-hook 'message-send-hook 'sign-or-encrypt-message)
  (set-face-foreground 'mu4e-unread-face "yellow")

  (defun sign-or-encrypt-message ()
    (let ((answer (read-from-minibuffer "Sign or encrypt?\nEmpty to do nothing.\n[s/e]: ")))
         (cond
           ((string-equal answer "s") (progn
                                        (message "Signing message.")
                                        (mml-secure-message-sign-pgpmime)))
           ((string-equal answer "e") (progn
                                        (message "Encrypt and signing message.")
                                        (mml-secure-message-encrypt-pgpmime)))
           (t (progn
                (message "Dont signing or encrypting message.")
                nil)))))
#+end_src

*** Inline images
Viewing inline images, read [[https://www.djcbsoftware.nl/code/mu/mu4e/Viewing-images-inline.html][here]].

#+begin_src emacs-lisp
(if (eq system-type 'gnu/linux)
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types)))
#+end_src

*** Attachments
Attachments on mu4e, read [[https://www.djcbsoftware.nl/code/mu/mu4e/Attaching-files-with-dired.html][here]].

#+begin_src emacs-lisp
;; make the `gnus-dired-mail-buffers' function also work on
;; message-mode derived modes, such as mu4e-compose-mode
(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
        (set-buffer buffer)
        (when (and (derived-mode-p 'message-mode)
                (null message-sent-message-via))
          (push (buffer-name buffer) buffers))))
    (nreverse buffers)))

(if (eq system-type 'gnu/linux)
  (when (require 'gnus-dired nil 'noerror)
  (setq gnus-dired-mail-mode 'mu4e-user-agent)
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)))
#+end_src


** Keybindings

Open this file

#+begin_src emacs-lisp
(define-key global-map (kbd "ESC ESC c")(lambda() (interactive)(find-file "~/.emacs.d/config.org")))
#+end_src

Ibuffer

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

Use `C-x C-0` to restore font size.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)        ; Bigger
(global-set-key (kbd "C--") 'text-scale-decrease)        ; Smaller
#+END_SRC

Bind backward-kill-word to C-w

#+begin_src emacs-lisp
(global-set-key (kbd "C-w") 'backward-kill-word)
#+end_src

Moving things up and down (related defuns under a different heading)

#+begin_src emacs-lisp
(global-set-key [(control shift up)]  'move-line-up)
(global-set-key [(control shift down)]  'move-line-down)
#+end_src

Global Copy & Paste in Unix

#+begin_src emacs-lisp
  ;; Copy to clipboard
  (defun copy-to-clipboard ()
    "Copies selection to x-clipboard."
    (interactive)
    (if (display-graphic-p)
        (progn
          (message "Yanked region to x-clipboard!")
          (call-interactively 'clipboard-kill-ring-save)
          )
      (if (region-active-p)
          (progn
            (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
            (message "Yanked region to clipboard!")
            (deactivate-mark))
        (message "No region active; can't yank to clipboard!")))
    )

  ;; Paste from clipboard
  (defun paste-from-clipboard ()
    (interactive)
    (if (display-graphic-p)
        (progn
          (clipboard-yank)
          (message "graphics active")
          )
      (insert (shell-command-to-string "xsel -o -b"))
      )
    )
#+end_src

Miscellaneous keybindings

#+begin_src emacs-lisp
(define-key global-map (kbd "s-d") 'projectile-find-dir)       ;; Find folder in project
(define-key global-map (kbd "s-f") 'projectile-find-file)      ;; Find file in project
(define-key global-map (kbd "s-p") 'projectile-switch-project) ;; Switch project
(define-key global-map (kbd "s-m") 'magit-status)              ;; Magit status
(define-key global-map (kbd "s-e") 'elfeed) ;; Elfeed
#+end_src

Resize window

#+begin_src emacs-lisp
(define-key global-map (kbd "s-<left>") 'shrink-window-horizontally)
(define-key global-map (kbd "s-<right>") 'enlarge-window-horizontally)
(define-key global-map (kbd "s-<down>") 'shrink-window)
(define-key global-map (kbd "s-<up>") 'enlarge-window)
#+end_src

Consult remapping

#+begin_src emacs-lisp
(define-key global-map (kbd "s-r") 'consult-ripgrep)    ;; Search with ripgrep
(define-key global-map (kbd "s-g") 'consult-grep)       ;; Search with grep
(define-key global-map (kbd "s-s") 'consult-line-multi) ;; Match in all open buffers
(define-key global-map (kbd "s-a") 'consult-find)       ;; Search for regexp in DIR
(define-key global-map (kbd "C-s") 'consult-line)       ;; Match in current buffer
#+end_src

Yasnippet insert

#+begin_src emacs-lisp
(global-set-key (kbd "C-c y") 'yas-insert-snippet)
#+end_src

Dictionary search

#+begin_src emacs-lisp
(global-set-key (kbd "C-c d") 'dictionary-search)
(global-set-key (kbd "C-c w") 'dictionary-match-words)
#+end_src

Thesaurus lookup

#+begin_src emacs-lisp
(global-set-key (kbd "C-c t") 'powerthesaurus-lookup-dwim)
#+end_src
