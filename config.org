* Basics

This is an emacs configuration written as Org file(s). Literate configs are a side of literate programming (https://en.wikipedia.org/wiki/Literate_programming) where configuration is written in a file along with its documentation. From this literate configuration file, configs applied are subject to be extracted into a "runnable" file (in this case into init.el), this process is called "tangling" (important Org functions for this are org-babel-tangle and org-babel-tangle-file, see: https://orgmode.org/manual/Extracting-source-code.html for more info on the subject).

** Basic defaults

Remove all the stuff I don't use.

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(scroll-bar-mode nil)
 '(horizontal-scroll-bar-mode nil)
 '(blink-cursor-mode nil)
 '(tool-bar-mode nil)
 '(menu-bar-mode nil))
#+END_SRC

Custom faces
#+begin_src emacs-lisp
(custom-set-faces
 '(lazy-highlight ((t (:inherit highlight :background "DarkGoldenrod1")))))

#+end_src
Yes or no: y-or-n

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Some miscelaneous defaults.
#+BEGIN_SRC emacs-lisp
(setq-default inhibit-startup-screen t
              initial-scratch-message ""
	      visible-bell nil                               ; No shaking
	      confirm-nonexistent-file-or-buffer nil         ; Remove confirm dialog on new buffers
	      show-paren-delay 0                             ; No delay when showing matching parenthesis
	      confirm-kill-emacs 'y-or-n-p                   ; Confirm exiting Emacs
	      display-time-default-load-average nil          ; Don't display load average
	      indent-tabs-mode nil                           ; No tabs for indentation
	      select-enable-clipboard t                      ; Unite Emacs & system clipboard
	      window-combination-resize t                    ; Create new windows proportionally
	      use-package-always-ensure t)                    ; Install packages if not found on the system
#+END_SRC

Scrolling defaults.
#+BEGIN_SRC emacs-lisp
(setq scroll-margin 1
      scroll-conservatively 0
      scroll-up-aggressively 0.01
      scroll-down-aggressively 0.01)

(setq-default scroll-up-aggressively 0.01
              scroll-down-aggressively 0.01)
#+END_SRC

UTF-8 everywhere, because it is the standard and disable CJK
coding/encoding (Chinese/Japanese/Korean characters).

#+BEGIN_SRC emacs-lisp
(setq utf-translate-cjk-mode nil
      default-file-name-coding-system 'utf-8
      locale-coding-system 'utf-8
      x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment 'utf-8)
(set-language-environment 'utf-8)

(if (boundp buffer-file-coding-system)
    (setq buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))
#+END_SRC

** Misc keybindings

Use `C-x C-0` to restore font size.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)        ; Bigger
(global-set-key (kbd "C--") 'text-scale-decrease)        ; Smaller
(global-set-key (kbd "M-n") 'next-multiframe-window)     ; Cycle through frames
(global-set-key (kbd "M-p") 'previous-multiframe-window) ; Cycle through frames
#+END_SRC

Set C-x C-m as a sequence for M-x. And the "backup" C-c C-m for misstyping.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-m") 'execute-extended-command)
(global-set-key (kbd "C-c C-m") 'execute-extended-command)
#+end_src

Bind backward-kill-word to C-w

#+begin_src emacs-lisp
(global-set-key (kbd "C-w") 'backward-kill-word)
(global-set-key (kbd "C-x C-k") 'kill-region)
(global-set-key (kbd "C-c C-k") 'kill-region)
#+end_src

Moving things up and down (related defuns under a different heading)

#+begin_src emacs-lisp
(global-set-key [(control shift up)]  'move-line-up)
(global-set-key [(control shift down)]  'move-line-down)
#+end_src

Global Copy & Paste in Unix

#+begin_src emacs-lisp
  ;; Copy to clipboard
  (defun copy-to-clipboard ()
    "Copies selection to x-clipboard."
    (interactive)
    (if (display-graphic-p)
        (progn
          (message "Yanked region to x-clipboard!")
          (call-interactively 'clipboard-kill-ring-save)
          )
      (if (region-active-p)
          (progn
            (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
            (message "Yanked region to clipboard!")
            (deactivate-mark))
        (message "No region active; can't yank to clipboard!")))
    )

  ;; Paste from clipboard
  (defun paste-from-clipboard ()
    (interactive)
    (if (display-graphic-p)
        (progn
          (clipboard-yank)
          (message "graphics active")
          )
      (insert (shell-command-to-string "xsel -o -b"))
      )
    )
#+end_src

** Theme

Use monokai theme for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package monokai-theme
  :init
  (load-theme 'monokai t))
#+END_SRC

Stronger highlight for search results. Selected
by listing the faces (M-x list-faces-display, and then
searching for 'lazy-highlight', which corresponds to the
search results for a given ISearch.
#+begin_src emacs-lisp
(custom-set-faces
 '(lazy-highlight ((t (:inherit highlight :background "DarkGoldenrod1")))))
#+end_src

** OS X

Use Steve Purcell's [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] when loading Emacs outside the console.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :config
  (setq exec-path-from-shell-variables '("PATH" "GOPATH")
        exec-path-from-shell-check-startup-files nil)
  (exec-path-from-shell-initialize))
#+END_SRC

The variables available for binding the modifier keys on Mac keyboards are the following:

- mac-function-modifier
- mac-control-modifier
- mac-command-modifier
- mac-option-modifier
- mac-right-command
- mac-right-control-modifier
- mac-right-option-modifier

The values can be 'control, 'alt, 'meta, 'super, 'hyper, nil (setting to nil allows the OS to assign values). Sources: [[https://www.emacswiki.org/emacs/EmacsForMacOS#toc31][emacswiki.org]] 
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mac-_002f-GNUstep-Events.html#Mac-_002f-GNUstep-Events][gnu.org]]
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq-default
   exec-path (append exec-path '("/usr/local/bin"))  ; Add Homebrew path
   mac-command-modifier 'meta                        ; Map Meta to Cmd
   mac-option-modifier nil                           ; Don't use Option key 
   mac-right-option-modifier nil                     ; Disable the right Alt key
   ns-pop-up-frames nil                              ; Visit files in same frame
   dired-use-ls-dired nil))                          ; macOS command ls doesn't support --dired option
#+END_SRC

** Backups

As default write backup files on ~/.emacs.d/backup and disables lock files, it gets messy on mounted network file systems like Keybase FS (https://keybase.io/).

#+BEGIN_SRC emacs-lisp
(setq backup-by-copying t
      backup-directory-alist '(("." . "~/.emacs.d/backup"))
      delete-old-versions t
      kept-new-versions 3
      kept-old-versions 2
      version-control t
      create-lockfiles nil
      vc-follow-symlinks t)
#+END_SRC


* Languages / frameworks

** Dot

#+begin_src emacs-lisp
(use-package dot-mode
  :mode "\\.dot$")
#+end_src

** Docker

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile\\'" 
  :mode "Dockerfile.test\\'")
#+END_SRC

** HTML

#+BEGIN_SRC emacs-lisp
(use-package sgml-mode
  :mode "\\.html\\'"
  :config (setq-default sgml-basic-offset 2))
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode "INSTALL\\'"
  :mode "CONTRIBUTORS\\'"
  :mode "LICENSE\\'"
  :mode "README\\'"
  :mode "\\.markdown\\'"
  :mode "\\.md\\'"
  :config
  (setq-default
   markdown-asymmetric-header t
   markdown-split-window-direction 'right))
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode "\\.yml\\'"  
  :mode "\\.yaml\\'")
#+END_SRC

** CSV

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (use-package csv-mode
    :mode "\\.[Cc][Ss][Vv]\\'"
    :init (setq csv-separators '("," ";" "|" " "))
    :config (use-package csv-nav)))
#+END_SRC

** Go

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :mode "\\.go\\'"
  :mode "\\.toml\\'"
  :init
  (add-hook 'before-save-hook #'gofmt-before-save))

(use-package go-eldoc
  :init
  (add-hook 'go-mode-hook 'go-eldoc-setup))

(use-package go-add-tags)
#+END_SRC

** Ruby

#+BEGIN_SRC emacs-lisp
(use-package ruby-mode
  :mode "\\.rb\\'"
  :mode "\\.rake\\'"
  :mode "\\.ru\\'"
  :mode "Gemfile\\'"
  :mode "Rakefile\\'"
  :mode "Capfile\\'" 
  :mode "\\.gemspec\\'"
  :init
  (setq ruby-insert-encoding-magic-comment nil
        ruby-indent-tabs-mode nil
        ruby-mode-hook 2))
#+END_SRC

*** Ruby environment managqer

Uses [[https://rvm.io/][RVM]] to manage gems.

#+BEGIN_SRC emacs-lisp
(use-package rvm
  :ensure t
  :config
  (rvm-use-default))
#+END_SRC

*** Rubocop

Rubocop for all things Ruby

#+begin_src emacs-lisp
(use-package rubocop
  :hook (ruby-mode-hook . rubocop-mode))
#+end_src

** Cucumber

Use [[https://cucumber.io/][Cucumber]] for BDD

#+BEGIN_SRC emacs-lisp
(use-package feature-mode
  :commands feature-mode
  :config
  (setq feature-default-language "en"))
#+END_SRC

** Erlang

Using standard erlang.el

#+begin_src emacs-lisp
(use-package erlang
  :init
  (add-to-list 'auto-mode-alist '("\\.P\\'" . erlang-mode))
  (add-to-list 'auto-mode-alist '("\\.E\\'" . erlang-mode))
  (add-to-list 'auto-mode-alist '("\\.S\\'" . erlang-mode))
  (add-to-list 'auto-mode-alist '("\\.erl?$" . erlang-mode))
  :config
  (add-hook 'erlang-mode-hook
            (lambda ()
              (setq mode-name "erlang"
                    erlang-compile-extra-opts '((i . "../include"))
                    erlang-root-dir "/usr/local/lib/erlang"))))
#+end_src

** Clojure

Minimal setup to begin with, clojure-mode.

#+begin_src emacs-lisp
(use-package clojure-mode
  :ensure t
  :mode (("\\.clj\\'" . clojure-mode)
         ("\\.edn\\'" . clojure-mode))
  :init
  (add-hook 'clojure-mode-hook #'subword-mode)
  (add-hook 'clojure-mode-hook #'smartparens-mode)
  (add-hook 'clojure-mode-hook #'eldoc-mode))
#+end_src

Now [[https://github.com/clojure-emacs/cider][CIDER]]. Another creation from bbatsov :+1:

#+begin_src emacs-lisp
(use-package cider
  :ensure t
  :defer t
  :config
    (setq nrepl-log-messages t
          cider-repl-display-in-current-window t
          cider-repl-use-clojure-font-lock t
          cider-prompt-save-file-on-load 'always-save
          cider-font-lock-dynamically '(macro core function var)
          nrepl-hide-special-buffers t
          cider-overlays-use-font-lock t)
    (cider-repl-toggle-pretty-printing))
#+end_src


* Features

** Which-key

#+BEGIN_SRC emacs-lisp
 (use-package which-key
  :init
  (add-hook 'after-init-hook 'which-key-mode)
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.25))
#+END_SRC

** Ace

Use ace-window to cycle through windows

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :config
  :bind* ("M-o" . ace-window))
#+END_SRC

** Ibuffer

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(defun my-org-agenda-filter ()
  (let ((fname (buffer-file-name)))
    (and fname
         (member (file-truename fname)
                 (mapcar 'file-truename (org-agenda-files))))))

(setq ibuffer-expert t
      ibuffer-show-empty-filter-groups nil
      ibuffer-saved-filter-groups
      (list
       (cons "default"
             (append
               '(("Org Agenda"  (name . "\*Org Agenda\*"))
                ("Magit" (name . "\*magit"))
                ("Emacs" (name . "^\\*"))
                ("Org" (or (mode . org-agenda-mode)
                           (mode . diary-mode)
                           (predicate . (my-org-agenda-filter)))))))))

(add-hook 'ibuffer-mode-hook
  (lambda ()
    (ibuffer-auto-mode 1)
    (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC

** Encryption

EasyPG is used for encryption. More info ([[https://www.emacswiki.org/emacs/EasyPG]])

#+BEGIN_SRC emacs-lisp
(setq epg-gpg-program "gpg2")
(setf epa-pinentry-mode 'loopback)
(setq epa-file-inhibit-auto-save t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (use-package pinentry
  :config
  (pinentry-start)))
#+END_SRC

** Misc

Greek letters should look greek; reload files when change, please;
highlight matching parenthesis; global Cmd-c, Cmd-x to copy & paste;
native line numbers

#+BEGIN_SRC emacs-lisp
(dolist (mode
  '(global-prettify-symbols-mode
    global-auto-revert-mode
    show-paren-mode
    cua-mode
    global-display-line-numbers-mode
    ))
  (funcall mode 1))
#+END_SRC

Filters marked packages from Packages buffer.

#+begin_src emacs-lisp
(defun package-menu-find-marks ()
  "Find packages marked for action in *Packages*."
  (interactive)
  (occur "^[A-Z]"))
(define-key package-menu-mode-map "a" #'package-menu-find-marks)
#+end_src

Reloads Emacs config without having to restart the service.

#+begin_src emacs-lisp
(defun emacs-reload ()
  "Reload emacs config"
  (interactive)
  (org-babel-load-file (expand-file-name "config.org" user-emacs-directory)))
#+end_src

#+begin_src emacs-lisp
(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))
#+end_src

** Tramp mode

Use tramp to shell into other machines.

#+BEGIN_SRC emacs-lisp
(use-package tramp
  :config
  (tramp-set-completion-function "ssh" '((tramp-parse-sconfig "/etc/ssh_config") (tramp-parse-sconfig "~/.ssh/config"))))
#+END_SRC

** Smart parens

Use smart parens when writing parenthesis to not let any parethesis unmatched.

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :init
    (add-hook 'ruby-mode-hook 'smartparens-strict-mode))
#+END_SRC

** Org

Adding org files for agenda

#+BEGIN_SRC emacs-lisp
(if (eq system-type 'darwin)
    (setq org-directory "/Volumes/Keybase/private/spavi/org"
          org-default-notes-file "/Volumes/Keybase/private/spavi/org/refile.org.gpg")
  (setq org-directory "/keybase/private/spavi/org"
        org-default-notes-file "/keybase/private/spavi/org/refile.org.gpg"))
(require 'find-lisp)
(setq org-agenda-files
  (find-lisp-find-files org-directory "\.org.gpg$"))
#+END_SRC

The thick of it

#+BEGIN_SRC emacs-lisp
  (use-package org
    :init
    (setq org-support-shift-select t
          org-return-follows-link t
          org-hide-emphasis-markers t
          org-outline-path-complete-in-steps nil
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-confirm-babel-evaluate nil
          org-log-done t
          org-refile-targets '((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9))
          org-refile-use-outline-path t
          org-outline-path-complete-in-steps nil
          org-indirect-buffer-display 'current-window
          org-fast-tag-selection-include-todo t
          org-use-fast-todo-selection t
          org-startup-indented t)
    (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
    (add-to-list 'auto-mode-alist '(".*/[0-9]*$" . org-mode))
    (add-hook 'org-mode-hook 'auto-fill-mode)
    (add-hook 'org-journal-mode-hook 'auto-fill-mode)
    :bind (("C-c l" . org-store-link)
           ("C-c n" . org-capture)
           ("C-c a" . org-agenda))
    :config
    (font-lock-add-keywords
     'org-mode `(("^\\*+ \\(TODO\\) "
                  (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚑") nil)))
                 ("^\\*+ \\(PROGRESSING\\) "
                  (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚐") nil)))
                 ("^\\*+ \\(CANCELED\\) "
                  (1 (progn (compose-region (match-beginning 1) (match-end 1) "✘") nil)))
                 ("^\\*+ \\(DONE\\) "
                  (1 (progn (compose-region (match-beginning 1) (match-end 1) "✔") nil)))))

    (setq org-tag-alist '((:startgroup) ("@w0rk" . ?w) ("@home" . ?h) (:endgroup))
          org-todo-keywords '((sequence "TODO(t)" "PROGRESSING(p)" "|" "DONE(d)")
                              (sequence "INACTIVE(i@/!)" "|" "CANCELLED(c@/!)"))
          org-todo-keyword-faces
          '(("TODO" :foreground "red" :weight bold)
            ("PROGRESSING" :foreground "blue" :weight bold)
            ("DONE" :foreground "forest green" :weight bold)
            ("INACTIVE" :foreground "magenta" :weight bold)
            ("CANCELLED" :foreground "brown" :weight bold)))
    (setq org-agenda-custom-commands
          '(("w" "Work" tags-todo "@w0rk")
            ("h" "Home" tags-todo "@home")))

    (define-key org-mode-map [remap org-return] (lambda () (interactive)
                                                  (if (org-in-src-block-p)
                                                      (org-return) (org-return-indent)))))
#+END_SRC

Org journaling

#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :config
  (setq org-journal-date-format "%A, %d.%m.%Y"
        org-journal-file-format "%Y%m%d")
  (if (eq system-type 'darwin)
      (setq org-journal-dir "/Volumes/Keybase/private/spavi/org/diary/")
    (setq org-journal-dir "/keybase/private/spavi/org/diary/")))
#+END_SRC

Org template custom configurations

#+BEGIN_SRC emacs-lisp
(defvar org-capture-templates
  '(
    ("t" "To-do task." 
     entry 
     (file+headline org-default-notes-file "To-do tasks")
     (file "~/.emacs.d/org-templates/schedule.orgcaptmpl"))
    ("w" "Work task." 
     entry 
     (file+headline org-default-notes-file "Work tasks")
     (file "~/.emacs.d/org-templates/schedule.orgcaptmpl"))
    ("l" "Link: Something interesting?"
     entry
     (file+headline org-default-notes-file "Links")
     (file "~/.emacs.d/org-templates/links.orgcaptmpl"))
    ("i" "Idea came up." 
     entry 
     (file org-default-notes-file)
     "* %? :IDEA: \n%u" :clock-in t :clock-resume t)))
#+END_SRC

Meeting note taking (source: [[https://github.com/howardabrams/dot-files/][Howard Abrams' Github]])

#+BEGIN_SRC emacs-lisp
(defun meeting-notes ()
  "Call this after creating an org-mode heading for where the notes for the meeting
should be. After calling this function, call 'meeting-done' to reset the environment."
  (interactive)
  (outline-mark-subtree)
  (narrow-to-region (region-beginning) (region-end))
  (deactivate-mark)
  (delete-other-windows)
  (text-scale-set 2)
  (fringe-mode 0)
  (message "When finished taking your notes, run meeting-done."))

(defun meeting-done ()
  "Attempt to 'undo' the effects of taking meeting notes."
  (interactive)
  (widen)
  (text-scale-set 0)
  (fringe-mode 1)
  (winner-undo))
#+END_SRC

Bullets!

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :after org
  :hook
  (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC

Calendar modifications (Finnish calendar, etc)

#+BEGIN_SRC emacs-lisp
(use-package suomalainen-kalenteri
  :after org
  :config
  (setq calendar-date-style 'european
        calendar-latitude 60.1
        calendar-longitude 24.9
        calendar-week-start-day 1
        calendar-today-visible-hook 'calendar-mark-today
        calendar-holidays suomalainen-kalenteri))
#+END_SRC

Some org-agenda specific configs.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-use-tag-inheritance nil
      org-agenda-ignore-drawer-properties '(effort appt category)
      org-agenda-dim-blocked-tasks nil
      org-agenda-tags-column -55
      org-log-into-drawer t)
#+END_SRC

Using org habits to track repeating tasks.

#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-habit)
(setq org-habit-show-habits-only-for-today nil
      org-habit-graph-column 60
      org-habit-show-all-today t
      org-habit-show-following-days 10
      org-habit-preceding-days 10
      org-habit-show-habits t)
#+end_src

Make code blocks the old way with `<s TAB`

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

Setup Google Calendar integration

#+begin_src emacs-lisp
(setq package-check-signature nil)

(require 'json)
(defun get-gcal-config-value (key)
  "Return the value of the json file gcal_secret for key"
  (cdr (assoc key (json-read-file "~/.emacs.d/org-gcal/gcal.json"))))

(use-package org-gcal
  :ensure t
  :config
  (if (eq system-type 'darwin)
      (setq org-gcal-file-alist '(("manuel@compensate.com" . "/Volumes/Keybase/private/spavi/org/schedule.org.gpg")))
    (setq org-gcal-file-alist '(("manuel@compensate.com" . "/keybase/private/spavi/org/schedule.org.gpg"))))
  (setq org-gcal-client-id (get-gcal-config-value 'org-gcal-client-id)
        org-gcal-client-secret (get-gcal-config-value 'org-gcal-client-secret)))
(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))

(custom-set-variables
 '(org-gcal-down-days 10)
 '(org-gcal-up-days 10))
#+end_src

Org-babel languages to interpret in Org code blocks (by default, only
Lisp is understood).

Ditaa is a nice (Java) tool to generate images from ASCII. More info:
https://github.com/stathissideris/ditaa

#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages '(
                                                         (python . t) 
                                                         (ditaa . t)))
(setq org-ditaa-jar-path "/usr/bin/ditaa")
#+end_src

** Projectile

Use Projectile for jumping around code, etc.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :defer 1
  :init
  (setq-default
   projectile-cache-file (expand-file-name ".projectile-cache" user-emacs-directory)
   projectile-keymap-prefix (kbd "C-c C-p")
   projectile-known-projects-file (expand-file-name
                                   ".projectile-bookmarks" user-emacs-directory))
  :config
  (projectile-global-mode 1)
  (setq-default
   projectile-indexing-method 'alien
   projectile-globally-ignored-modes '("org-mode" "org-agenda-mode")
   projectile-globally-ignored-file-suffixes '(".gpg")
   projectile-completion-system 'ivy
   projectile-enable-caching t
   projectile-mode-line '(:eval (projectile-project-name)))
   (add-hook 'org-agenda-mode-hook (lambda () (projectile-mode -1)))
   (add-hook 'org-mode-hook (lambda () (projectile-mode -1))))
#+END_SRC

** Highlight

#+BEGIN_SRC emacs-lisp
(use-package highlight)
#+END_SRC

** Treemacs

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :config
  (setq treemacs-follow-after-init t
        treemacs-width 35
        treemacs-indentation 1
        treemacs-recenter-after-file-follow nil
        treemacs-silent-refresh t
        treemacs-silent-filewatch t
        treemacs-change-root-without-asking t
        treemacs-sorting 'alphabetic-desc
        treemacs-show-hidden-files t
        treemacs-never-persist nil
        treemacs-is-never-other-window nil
        treemacs-indentation-string (propertize " ǀ " 'face 'font-lock-comment-face)
        treemacs-follow-mode t
        treemacs-filewatch-mode t
        treemacs-fringe-indicator-mode t)
  :bind
  (([f8] . treemacs)
   ("C-c f" . treemacs-select-window)))

(use-package treemacs-projectile
  :after treemacs projectile
  :bind 
  (("C-c o p" . treemacs-projectile)))
#+END_SRC

** Yafolding

#+BEGIN_SRC emacs-lisp
(use-package yafolding
  :init
  (add-hook 'ruby-mode-hook 'yafolding-mode)
  :bind
  (("M-n" . yafolding-toggle-element)
  ("M-m" . yafolding-toggle-all)))
#+END_SRC

** Restclient

Use Pashky's [[https://github.com/pashky/restclient.el][restclient.el]] to explore APIs

#+begin_src emacs-lisp
(use-package restclient
  :mode ("\\.http\\'" . restclient-mode))
#+end_src

** Magit

Magit is love for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  :bind (("C-x g" . magit-status))
  :init
  (setq-default
   magit-auto-revert-mode nil
   magit-refs-show-commit-count 'all
   magit-section-show-child-count t))
#+END_SRC

** Company completion

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :defer t
  :init
  (global-company-mode t)
  :config
  (progn
    (bind-key [remap completion-at-point] #'company-complete company-mode-map)
    (setq company-tooltip-align-annotations t
          company-show-numbers t)
    (setq company-dabbrev-downcase nil)))
#+end_src

** Flycheck

On-the-fly syntax checking

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)
  :config
  (setq flycheck-check-syntax-automatically '(save mode-enable)))

#+end_src

** Ivy + Swiper + Counsel

Ivy basics

#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :init (ivy-mode 1)
  :config
  (setq ivy-use-virtual-buffers t
        enable-recursive-minibuffers t
        ivy-count-format "(%d/%d) "))
#+end_src

Beautiful ivy

#+begin_src emacs-lisp
(use-package ivy-rich
  :after ivy
  :custom
  (ivy-virtual-abbreviate 'full
                          ivy-rich-switch-buffer-align-virtual-buffer t
                          ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))
#+end_src

Swiper basics

#+begin_src emacs-lisp
(use-package swiper
  :ensure t
  :after ivy
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))
#+end_src

Counsel basics

#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :after ivy
  :config (counsel-mode)
  :bind (("C-c g" . counsel-git)
         ("C-c j" . counsel-git-grep)))
#+end_src
